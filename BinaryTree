//WARNING !!! may this code have some bugs, some options not running correctly !!!
//main.c
#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include "structs.h"
#include "structsfuction.h"
#include "avltreefunction.h"

int main() {

	Btree *root = NULL;
	int case1, case2 = 1, key, i, data;
	while (case2 != 0)
	{
		printf("\n***************MENU**************\n");
		printf("1)Create Binary tree and add data    \n");
		printf("2)Size                               \n");
		printf("3)Count Leaves                       \n");
		printf("4)Height                             \n");
		printf("5)Print inorder                      \n");
		printf("6)Print preorder                     \n");
		printf("7)Print postorder                    \n");
		printf("8)Print Minimum Value                \n");
		printf("9)Print Maximum Value                \n");
		printf("10)Delete Searched Value             \n");
		printf("11)Is this tree BST?                 \n");
		printf("12)Mirror                            \n");
		printf("0)Exit                               \n");
		scanf("%d", &case1);


		switch (case1) {
		case 1:
			system("CLS");
			printf("How many nodes create?\n");
			scanf("%d", &i);
			for (int j = 0; j < i; j++) {
				system("CLS");
				printf("Enter your node data:\n");
				scanf("%d", &key);
				root = insert(root, key);
			}
			system("CLS");
			printf("\nPress enter for continue\n");
			getch();
			system("CLS");
			break;
		case 2:
			system("CLS");
			data = size(root);
			printf("Your Tree size is %d", data);
			printf("\nPress enter for continue\n");
			getch();
			system("CLS");
			break;
		case 3:
			system("CLS");
			data = leaves(root);
			printf("Your Tree have %d leaves", data);
			printf("\nPress enter for continue\n");
			getch();
			system("CLS");
			break;
		case 4:
			system("CLS");
			data = height(root);
			printf("Your Tree heigt is %d", data);
			printf("\nPress enter for continue\n");
			getch();
			system("CLS");
			break;
		case 5:
			system("CLS");
			inorder(root);
			printf("\nPress enter for continue\n");
			getch();
			system("CLS");
			break;
		case 6:
			system("CLS");
			preorder(root);
			printf("\nPress enter for continue\n");
			getch();
			system("CLS");
			break;
		case 7:
			system("CLS");
			postorder(root);
			printf("\nPress enter for continue\n");
			getch();
			system("CLS");
			break;
		case 8:
			system("CLS");
			data = minValue(root);
			printf("Your Tree minimum value is %d", data);
			printf("\nPress enter for continue\n");
			getch();
			system("CLS");
			break;
		case 9:
			system("CLS");
			data = maxValue(root);
			printf("Your Tree minimum value is %d", data);
			printf("\nPress enter for continue\n");
			getch();
			system("CLS");
			break;
		case 10:
			system("CLS");
			printf("Enter your node data:\n");
			scanf("%d", &data);
			root=delete_node(root, data);
			system("CLS");
			printf("Your Has Been Delete");
			printf("\nPress enter for continue\n");
			getch();
			system("CLS");
			break;
		case 11:
			system("CLS");
			if (isBST(root)) {
				printf("This tree is BST");
			}
			else
			{
				printf("This tree isn't BST");
			}
			printf("\nPress enter for continue\n");
			getch();
			system("CLS");
			break;
		case 12:
			system("CLS");
			mirror(root);
			printf("Process has been completied");
			printf("\nPress enter for continue\n");
			getch();
			system("CLS");
			break;
		case 0:
			case2 = 0;
			break;
		default:
			system("CLS");
			case1 = 0;
			printf("Wrong key!\nPress Enter.");
			getch();
			system("CLS");
			break;
		}
	}

	return 0;
}
//struct.h
struct node {
	int data;
	struct node *right;
	struct node *left;
};
typedef struct node Btree;
//structsfuction.h
Btree *new_node(int data) {
	Btree *x = (Btree*)malloc(sizeof(Btree));
	x->data = data;
	x->left = NULL;
	x->right = NULL;
		return x;
}
Btree *insert(Btree *root, int data) {
	if (root != NULL) {
		if (data < root->data) {
			root->left=insert(root->left, data);
		}
		else {
			root->right=insert(root->right, data);
		}

	}
	else
		root = new_node(data);

	return root;
}
int height(Btree *root) {
	if (root == NULL)
		return -1;
	else {
		int left_height, right_height;
		left_height = height(root->left);
		right_height = height(root->right);
		if (right_height > left_height)
			return right_height + 1;
		else
			return left_height + 1;
	}
}
int size(Btree *root) {
	if (root == NULL)
		return 0;
	else
		return size(root->left) + 1 + size(root->right);
}
void mirror(Btree *root) {
	if (root == NULL) {
		return;
	}
	else {
		mirror(root->left);
		mirror(root->right);
		Btree *temp=root->left;
		root->left = root->right;
		root->right = temp;

		
	}

}
void preorder(Btree *root) {
	if (root != NULL) {
		printf("%d ", root->data);
		preorder(root->left);
		preorder(root->right);
	}
}
void inorder(Btree *root) {
	if (root != NULL) {
		inorder(root->left);
		printf("%d ", root->data);
		inorder(root->right);
	}
}
void postorder(Btree *root) {
	if (root != NULL) {
		postorder(root->left);
		postorder(root->right);
		printf("%d ", root->data);
	}
}
Btree* searchtree(Btree *tree, int data) {
	if (tree != NULL) {
		if (tree->data == data)
			return tree;
		else if (tree->data > data)
			return searchtree(tree->left, data);
		else
			return searchtree(tree->right, data);
	}
		
	else
		return NULL;
}
Btree *delete_node(Btree *root, int x) {
	Btree *p, *q;
	if (root == NULL)
		return NULL;
	if (root->data == x) {
		if (root->left == root->right) {
			free(root);
			return NULL;
		}
		else {
			if (root->left == NULL) {
				p = root->right;
				free(root);
				return p;
			}
			else if (root->right == NULL) {
				p = root->right;
				free(root);
				return p;
			}
			else {
				p = q = root->right;
				while (p->left != NULL)
					p = p->left;
				p->left = root->left;
				free(root);
				return q;
			}
		}
	}
	else if (root->data < x) {
		root->right = delete_node(root->right, x);
	}
	else
		root->left = delete_node(root->left, x);
}
int maxValue(Btree *root) {
	if (root == NULL)
		return 0;
	while (root->right != NULL)
		root = root->right;
	return(root->data);
}
int minValue(Btree *root) {
	if (root == NULL)
		return 0;
	while (root->left != NULL)
		root = root->left;
	return(root->data);
}
int leaves(Btree *root) {
	if (root == NULL)
		return 0;
	else if (root->left == NULL&&root->right == NULL)
		return 1;
	else
		return leaves(root->left) + leaves(root->right);
}
int isBST(Btree *root) {
	if (root == NULL)
		return 1;
	if (root->left != NULL&&maxValue(root->left) > root->data)
		return 0;
	if (root->right != NULL&&minValue(root->right) <= root->data)
		return 0;
	if (!isBST(root->left) || !isBST(root->right))
		return 0;
	return 1;
}
